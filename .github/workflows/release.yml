name: Flutter Release

on:
  push:
    tags:
      - "v*"
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: app
          submodules: recursive
          fetch-depth: 0

      - name: Decode Keystore
        if: runner.os == 'Linux'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > /home/runner/work/tiefprompt/tiefprompt/release.keystore

      - name: Create key.properties
        if: runner.os == 'Linux'
        run: |
          cat <<EOF > app/android/key.properties
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=/home/runner/work/tiefprompt/tiefprompt/release.keystore
          EOF

      - name: Install dependencies
        run: |
          ./.flutter/bin/flutter doctor
          ./.flutter/bin/flutter pub get
        working-directory: app

      - name: Build APKs (Android)
        if: runner.os == 'Linux'
        run: ./.flutter/bin/flutter build apk --release --split-per-abi
        working-directory: app

      - name: Build App Bundle (Android)
        if: runner.os == 'Linux'
        run: ./.flutter/bin/flutter build appbundle --release
        working-directory: app

      - name: Build Linux App
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install \
            clang cmake git \
            ninja-build pkg-config \
            libgtk-3-dev liblzma-dev \
            libstdc++-12-dev
          ./.flutter/bin/flutter build linux
        working-directory: app

      - name: Build Windows App
        if: runner.os == 'Windows'
        run: ./.flutter/bin/flutter build windows
        working-directory: app

      - name: Package Windows Artifacts
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          Compress-Archive app/build/windows/x64/runner/Release artifacts/windows.zip

      - name: Package Linux Artifacts
        if: runner.os == 'Linux'
        run: |
          mkdir -p artifacts
          if [ -d app/build/linux ]; then
            zip -r artifacts/linux.zip app/build/linux/x64/release/bundle/
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tiefprompt-${{ runner.os }}
          path: artifacts/*

  build-android:
    name: Build for Android
    runs-on: ubuntu-latest
    container: tiefseetauchner/tiefprompt-build:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: /app
          submodules: recursive
          fetch-depth: 0

      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > /keys/release.keystore

      - name: Create key.properties
        run: |
          cat <<EOF > /app/android/key.properties
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=/keys/release.keystore
          EOF

      - name: Set environment
        run: |
          echo "package_path=artifacts" >> $GITHUB_ENV

      - name: Prepare Build
        run: |
          .flutter/bin/flutter --disable-analytics
          .flutter/bin/flutter config --no-cli-animations
          .flutter/bin/flutter doctor
          .flutter/bin/flutter clean
          .flutter/bin/flutter pub get

      - name: Build Appbundle
        run: |
          .flutter/bin/flutter build appbundle --release
          cp build/app/outputs/bundle/release/app* "${{ env.package_path }}"

      - name: Build APKs
        run: |
          .flutter/bin/flutter build apk --release --split-per-abi
          cp build/app/outputs/bundle/release/app* "${{ env.package_path }}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tiefprompt-${{ runner.os }}
          path: ${{ env.package_path }}/*

  nightly-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, build-android]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Move / create the nightly tag
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: github-actions@github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: github-actions@github.com
        run: |
          git tag -fa nightly ${{ github.sha }} -m "nightly $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          git push -f origin refs/tags/nightly

      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Update Nightly GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly
          name: Nightly
          body: "Latest build from main branch."
          prerelease: true
          draft: false
          generate_release_notes: false
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN }}

  version-release:
    if: startswith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build, build-android]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Determine Pre-release Status
        id: prerelease_check
        run: |
          TAG_NAME="${{ github.ref_name }}"
          if [[ "$TAG_NAME" =~ ^v0\.|- ]]; then
            echo "prerelease=true" >> $GITHUB_ENV
          else
            echo "prerelease=false" >> $GITHUB_ENV
          fi

      - name: Publish Versioned GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Stable release for ${{ github.ref_name }}."
          prerelease: ${{ env.prerelease }}
          draft: true
          generate_release_notes: true
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_GITHUB_TOKEN }}
